{
	"info": {
		"_postman_id": "301a2c3b-dc37-4328-81db-2d5509f3a606",
		"name": "pd-replicated",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PD CHECK GET available-state on write node",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "205ca543-7e32-4e1a-929c-affa87d65d23",
						"exec": [
							"var _retries = pm.variables.has(\"_retries\") ? pm.variables.get(\"_retries\") : pm.variables.get(\"request_retry_count\");",
							"",
							"// Checks to see if the server actually responded",
							"if (pm.response.code == 200) {",
							"    pm.variables.unset(\"_retries\");",
							"    console.log(\"connection successful\");",
							"",
							"    var jsonData = JSON.parse(responseBody);",
							"",
							"    pm.test(\"availability-state  key is present\", function () {",
							"        pm.expect(jsonData[\"availability-state\"]).to.exist;",
							"    });",
							"",
							"    if (jsonData[\"availability-state\"] != \"AVAILABLE\"){",
							"        // loop back to this request (request.name) after the timeout elapses",
							"        setTimeout(function () { postman.setNextRequest(request.name); }, timeout);",
							"    } else {",
							"        console.log(\"Server available, proceeding...\");",
							"    }",
							"} else {",
							"    console.log(\". retries: \" + _retries);",
							"    _retries--;",
							"    console.log(\"- retries: \" + _retries);",
							"",
							"    if (_retries > 0) {",
							"        pm.variables.set(\"_retries\", _retries);",
							"        var _retry_min = pm.variables.get(\"request_retry_delay_min_ms\");",
							"        var _retry_max = pm.variable.get(\"request_retry_delay_max_ms\");",
							"        var _timeout = _.random(_retry_min, _retry_max);",
							"        console.log(_retries + \" retries left. Attempting next connection in \" + _timeout + \"ms ...\");",
							"        // loop back to this request (request.name) after the timeout elapses",
							"        setTimeout(function () { postman.setNextRequest(request.name); }, timeout);",
							"    } else {",
							"        console.log(\"Attempts exhausted\");",
							"        postman.setNextRequest(null);",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b51e2db0-92fd-43f2-ad26-163fc5f0f1b9",
						"exec": [
							"var _host = pm.variables.get(\"pd_write_hostname\");",
							"var _port = pm.variables.get(\"pd_write_port_https\");",
							"console.log(\"Attempting connection to https://\" + _host + \":\" + _port + \" ...\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_write_hostname}}:{{pd_write_port_https}}/available-state",
					"protocol": "https",
					"host": [
						"{{pd_write_hostname}}"
					],
					"port": "{{pd_write_port_https}}",
					"path": [
						"available-state"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD CHECK GET available-state on read node",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46be3778-1189-4dfd-8682-14df358056cc",
						"exec": [
							"var _retries = pm.variables.has(\"_retries\") ? pm.variables.get(\"_retries\") : pm.variables.get(\"request_retry_count\");",
							"",
							"// Checks to see if the server actually responded",
							"if (pm.response.code == 200) {",
							"    pm.variables.unset(\"_retries\");",
							"    console.log(\"connection successful\");",
							"",
							"    var jsonData = JSON.parse(responseBody);",
							"",
							"    pm.test(\"availability-state  key is present\", function () {",
							"        pm.expect(jsonData[\"availability-state\"]).to.exist;",
							"    });",
							"",
							"    if (jsonData[\"availability-state\"] != \"AVAILABLE\") {",
							"        // loop back to this request (request.name) after the timeout elapses",
							"        setTimeout(function () { postman.setNextRequest(request.name); }, timeout);",
							"    } else {",
							"        console.log(\"Server available, proceeding...\");",
							"    }",
							"} else {",
							"    console.log(\". retries: \" + _retries);",
							"    _retries--;",
							"    console.log(\"- retries: \" + _retries);",
							"",
							"    if (_retries > 0) {",
							"        pm.variables.set(\"_retries\", _retries);",
							"        var _retry_min = pm.variables.get(\"request_retry_delay_min_ms\");",
							"        var _retry_max = pm.variable.get(\"request_retry_delay_max_ms\");",
							"        var _timeout = _.random(_retry_min, _retry_max);",
							"        console.log(_retries + \" retries left. Attempting next connection in \" + _timeout + \"ms ...\");",
							"        // loop back to this request (request.name) after the timeout elapses",
							"        setTimeout(function () { postman.setNextRequest(request.name); }, timeout);",
							"    } else {",
							"        console.log(\"Attempts exhausted\");",
							"        postman.setNextRequest(null);",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9af22de7-edca-4cff-b1cb-7d402e2a328f",
						"exec": [
							"var _host = pm.variables.get(\"pd_read_hostname\");",
							"var _port = pm.variables.get(\"pd_read_port_https\");",
							"console.log(\"Attempting connection to https://\" + _host + \":\" + _port + \" ...\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_read_hostname}}:{{pd_read_port_https}}/available-state",
					"protocol": "https",
					"host": [
						"{{pd_read_hostname}}"
					],
					"port": "{{pd_read_port_https}}",
					"path": [
						"available-state"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get schemas",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2f7fdd8f-9926-472a-8099-999ff3f0e450",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Schemas key is present\",function(){",
							"    pm.expect(jsonData[\"schemas\"]).to.exist;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1/schemas",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"schemas"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get inetOrgPerson schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "db762957-b24d-41bc-8bd1-2a8da75fddef",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Schema key is present\",function(){",
							"    pm.expect(jsonData[\"$schema\"]).to.exist;",
							"});",
							"",
							"pm.test(\"classType key is present\",function(){",
							"    pm.expect(jsonData[\"classType\"]).to.exist;",
							"});",
							"",
							"pm.test(\"classType is structural\",function(){",
							"    pm.expect(jsonData[\"classType\"]).to.be.equal(\"structural\");",
							"});",
							"",
							"pm.test(\"Type key is present\",function(){",
							"    pm.expect(jsonData[\"type\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Type is object\",function(){",
							"    pm.expect(jsonData[\"type\"]).to.be.equal(\"object\");",
							"});",
							"",
							"pm.test(\"properties key is present\",function(){",
							"    pm.expect(jsonData[\"properties\"]).to.exist;",
							"});",
							"",
							"console.log(\"Attributes of the inetOrgPerson class:\");",
							"for ( var key in jsonData[\"properties\"] ) {",
							"    if (jsonData[\"properties\"].hasOwnProperty(key)){",
							"        console.log(\" - \"+key);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1/schemas/inetOrgPerson",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"schemas",
						"inetOrgPerson"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get RootDSE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "119e68ce-58c3-49e0-acf5-56e462d9c1dc",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Vendor string is present\",function(){",
							"    pm.expect(jsonData[\"vendorName\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Vendor string is as expected\",function(){",
							"    pm.expect(jsonData[\"vendorName\"]).to.be.equal(\"Ping Identity Corporation\");",
							"});",
							"",
							"pm.test(\"publicBaseDNs key is present\", function(){",
							"    pm.expect(jsonData[\"publicBaseDNs\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Base DN is as expected\", function(){",
							"    pm.expect(jsonData[\"publicBaseDNs\"][0]).to.be.equal(\"dc=example,dc=com\");",
							"    pm.environment.set(\"_base_dn\",jsonData[\"publicBaseDNs\"][0]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get base",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ff14f19a-87f2-410c-a013-9dc9fa91fc8e",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"_dn string is present\",function(){",
							"    pm.expect(jsonData[\"_dn\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Base DN is as expected\",function(){",
							"    var base_dn = pm.environment.get(\"pd_base_dn\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_hostname}}:{{pd_port_https}}/directory/v1/{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{pd_hostname}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get people branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5fddc221-b398-403c-91bb-2f18f26165ed",
						"exec": [
							"if (pm.response.code == 200) {",
							"    pm.test(\"response is ok\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"response is not empty\", function () {",
							"        pm.response.to.have.body();",
							"    });",
							"",
							"    pm.test(\"response is JSON\", function () {",
							"        pm.response.to.be.json;",
							"    });",
							"",
							"    var jsonData = JSON.parse(responseBody);",
							"",
							"    pm.test(\"_dn string is present\", function () {",
							"        pm.expect(jsonData[\"_dn\"]).to.exist;",
							"    });",
							"",
							"    pm.test(\"Base DN is as expected\", function () {",
							"        var _base_dn = pm.environment.get(\"_base_dn\");",
							"        var dn = \"ou=people,\" + _base_dn;",
							"        pm.expect(jsonData[\"_dn\"].toLowerCase()).to.be.equal(dn.toLowerCase());",
							"    });",
							"",
							"    postman.setNextRequest(\"PD REST API create user\");",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_write_hostname}}:{{pd_write_port_https}}/directory/v1/ou=People,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{pd_write_hostname}}"
					],
					"port": "{{pd_write_port_https}}",
					"path": [
						"directory",
						"v1",
						"ou=People,{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API create people branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1341015f-0b53-4f99-9ea5-77eb8886af7e",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"response is not empty\", function () {",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"_dn\": \"ou=People,{{_base_dn}}\",\n\t\"objectClass\": [\"organizationalUnit\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{pd_write_hostname}}:{{pd_write_port_https}}/directory/v1",
					"protocol": "https",
					"host": [
						"{{pd_write_hostname}}"
					],
					"port": "{{pd_write_port_https}}",
					"path": [
						"directory",
						"v1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get people branch on write node",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ca372746-baa4-4241-946a-6443bd22366c",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function () {",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"_dn string is present\", function () {",
							"    pm.expect(jsonData[\"_dn\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Base DN is as expected\", function () {",
							"    var _base_dn = pm.environment.get(\"_base_dn\");",
							"    var dn = \"ou=people,\" + _base_dn;",
							"    pm.expect(jsonData[\"_dn\"].toLowerCase()).to.be.equal(dn.toLowerCase());",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_write_hostname}}:{{pd_write_port_https}}/directory/v1/ou=People,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{pd_write_hostname}}"
					],
					"port": "{{pd_write_port_https}}",
					"path": [
						"directory",
						"v1",
						"ou=People,{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get people branch on read node",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c3f2875e-e60b-4bce-90d2-709c714bf452",
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function () {",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"_dn string is present\", function () {",
							"    pm.expect(jsonData[\"_dn\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Base DN is as expected\", function () {",
							"    var _base_dn = pm.environment.get(\"_base_dn\");",
							"    var dn = \"ou=people,\" + _base_dn;",
							"    pm.expect(jsonData[\"_dn\"].toLowerCase()).to.be.equal(dn.toLowerCase());",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "93646389-26c3-424d-82b2-b9c4820fd983",
						"exec": [
							"setTimeout(function () { console.log(\"Delaying request by 3 seconds\"); }, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{pd_write_hostname}}:{{pd_write_port_https}}/directory/v1/ou=People,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{pd_write_hostname}}"
					],
					"port": "{{pd_write_port_https}}",
					"path": [
						"directory",
						"v1",
						"ou=People,{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "37be5104-ea75-4aff-a749-3c7558b26c98",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    // 201 means means the creation worked",
							"    // 409 means the entry already existed",
							"    pm.expect([201,409]).to.include(pm.response.code);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"mail\": [\n        \"{{regular_user}}@example.com\"\n    ],\n    \"sn\": [\n        \"postman\"\n    ],\n    \"cn\": [\n        \"Postman User.0\"\n    ],\n    \"givenName\": [\n        \"user.0\"\n    ],\n    \"userPassword\": [\n    \t\"{{regular_pwd}}\"\n    \t],\n    \"pf-connected-identity\": [\n        \"auth-source=pf-local-identity:user-id=postman.user.0\"\n    ],\n    \"uid\": [\n        \"{{regular_user}}\"\n    ],\n    \"objectClass\": [\n        \"top\",\n        \"person\",\n        \"organizationalPerson\",\n        \"inetOrgPerson\",\n        \"pf-connected-identities\"\n    ],\n    \"_dn\": \"uid={{regular_user}},ou=people,{{_base_dn}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{pd_write_hostname}}:{{pd_write_port_https}}/directory/v1",
					"protocol": "https",
					"host": [
						"{{pd_write_hostname}}"
					],
					"port": "{{pd_write_port_https}}",
					"path": [
						"directory",
						"v1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get user on write node",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d01ac7f-36cd-4c70-a648-6bd6164a4343",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1d9e62c7-4cc7-4e47-ad5e-1e51ed421811",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{pd_read_hostname}}:{{pd_read_port_https}}/directory/v1/uid=postman.user.0,ou=People,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{pd_read_hostname}}"
					],
					"port": "{{pd_read_port_https}}",
					"path": [
						"directory",
						"v1",
						"uid=postman.user.0,ou=People,{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get user on read node",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41f2f13d-1049-4f35-90a5-02476d0655bf",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6b8b2210-7a70-41b4-b271-77fcbc7c15b7",
						"exec": [
							"setTimeout(function () { console.log(\"Delaying request by 3 seconds\"); }, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{pd_read_hostname}}:{{pd_read_port_https}}/directory/v1/uid=postman.user.0,ou=People,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{pd_read_hostname}}"
					],
					"port": "{{pd_read_port_https}}",
					"path": [
						"directory",
						"v1",
						"uid=postman.user.0,ou=People,{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4eabd9e2-ed41-4a93-b51f-67f410ebdbe7",
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{pd_write_hostname}}:{{pd_write_port_https}}/directory/v1/uid=postman.user.0,ou=people,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{pd_write_hostname}}"
					],
					"port": "{{pd_write_port_https}}",
					"path": [
						"directory",
						"v1",
						"uid=postman.user.0,ou=people,{{_base_dn}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{pd_admin_pwd}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{pd_admin_user}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e6d02f70-21b1-4b84-8bdd-828d06948572",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9557b641-153e-4353-9d64-dfe21affec22",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "5157a320-235c-480b-bcf2-af9c2b0ec9a9",
			"key": "request_retry_count",
			"value": "10",
			"type": "string"
		},
		{
			"id": "8e086660-e1a5-485a-849c-d585d4ad084d",
			"key": "request_retry_delay_max_ms",
			"value": "15000",
			"type": "string"
		},
		{
			"id": "3e395b5a-ba8a-4d6f-bfc4-baabfe811be7",
			"key": "request_retry_delay_min_ms",
			"value": "1000",
			"type": "string"
		},
		{
			"id": "6ce222e7-1122-4226-ba78-059aea927a42",
			"key": "admin_user",
			"value": "administrator",
			"type": "string"
		},
		{
			"id": "5af9fdf8-8269-4f6c-892c-43cce890b719",
			"key": "admin_pwd",
			"value": "2FederateM0re",
			"type": "string"
		},
		{
			"id": "83b26ee3-51da-4ec5-b286-4b2d04705037",
			"key": "pd_admin_user",
			"value": "cn={{admin_user}}",
			"type": "string"
		},
		{
			"id": "607daf52-f660-416c-8b14-36ac3841ace6",
			"key": "pd_admin_pwd",
			"value": "{{admin_pwd}}",
			"type": "string"
		},
		{
			"id": "33217dd5-7b3a-40f7-884f-5769c23dfecb",
			"key": "pd_hostname",
			"value": "pingdirectory",
			"type": "string"
		},
		{
			"id": "abdd7739-ca00-4447-bcb2-6b07e690ad27",
			"key": "pd_port_https",
			"value": "443",
			"type": "string"
		},
		{
			"id": "1ba0c3ad-4fc9-49dd-a56c-c16d855a5462",
			"key": "pd_port_ldaps",
			"value": "636",
			"type": "string"
		},
		{
			"id": "8b92bfbf-ec85-4c32-84d1-70cc9b70cc6d",
			"key": "pd_port_ldap",
			"value": "389",
			"type": "string"
		},
		{
			"id": "cfe44164-a22c-4c78-89b4-38c39d8f64d1",
			"key": "regular_user",
			"value": "postman.user.0",
			"type": "string"
		},
		{
			"id": "0f6adf64-aa02-4849-a60a-cc00b5d46098",
			"key": "regular_pwd",
			"value": "{{admin_pwd}}",
			"type": "string"
		},
		{
			"id": "af4dee9c-864a-47bd-8483-9157b8f100db",
			"key": "pd_write_hostname",
			"value": "{{pd_hostname}}-0.pingdirectory",
			"type": "string"
		},
		{
			"id": "c19d1649-ab00-49f8-9bac-8518e8aeac73",
			"key": "pd_read_hostname",
			"value": "{{pd_hostname}}-1.pingdirectory",
			"type": "string"
		},
		{
			"id": "a213ef81-1804-4ce6-96db-3f890b9d2c39",
			"key": "pd_write_port_https",
			"value": "{{pd_port_https}}",
			"type": "string"
		},
		{
			"id": "22e55f6a-e64f-4219-8ae1-38d9283bef26",
			"key": "pd_read_port_https",
			"value": "{{pd_port_https}}",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}
